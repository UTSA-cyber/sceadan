-------------------------- subset data ---------------------------
# 60% for training, 40% for testing
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ python subset.py heart_scale 162 heart_scale.train heart_scale.test

# 10% for grid
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ python subset.py heart_scale 27 heart_scale.grid


-------------------------- without epsilon ----------------------------
# grid search
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ python gridregression.py -log2c -1,3,1 -log2g null -log2p null -svmtrain ~/SVM/liblinear-1.91/train heart_scale.grid 
[local] 1.0 1.0 (best c=2.0, mse=1.0)
[local] 0.0 1.0 (best c=2.0, mse=1.0)
[local] 3.0 1.0 (best c=2.0, mse=1.0)
[local] -1.0 0.962963 (best c=0.5, mse=0.962963)
[local] 2.0 1.0 (best c=0.5, mse=0.962963)
0.5 0.962963

# train
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ ../../liblinear-1.91/train -s 3 -c 0.5 heart_scale.train heart_scale.model
...**
optimization finished, #iter = 39
Objective value = -24.714754
nSV = 58

# test
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ ../../liblinear-1.91/predict heart_scale.test heart_scale.model heart_scale.predict
Accuracy = 82.4074% (89/108)


-------------------------- without epsilon ----------------------------
# grid search
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ python gridregression.py -log2c -1,3,1 -log2g null -log2p -2,-1,1 -svmtrain ~/SVM/liblinear-1.91/train heart_scale.grid 
[local] 1.0 -1.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] 1.0 -2.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] 0.0 -1.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] 0.0 -2.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] 3.0 -1.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] 3.0 -2.0 1.0 (best c=2.0, p=0.5, mse=1.0)
[local] -1.0 -1.0 0.962963 (best c=0.5, p=0.5, mse=0.962963)
[local] -1.0 -2.0 0.962963 (best c=0.5, p=0.5, mse=0.962963)
[local] 2.0 -1.0 1.0 (best c=0.5, p=0.5, mse=0.962963)
[local] 2.0 -2.0 1.0 (best c=0.5, p=0.5, mse=0.962963)
0.5 0.5 0.962963

# train
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ ../../liblinear-1.91/train -s 3 -c 0.5 -p 0.5 heart_scale.train heart_scale2.model
...**
optimization finished, #iter = 39
Objective value = -24.714754
nSV = 58

# test
lishu@Beebe1:~/SVM/libsvm-3.12/tools$ ../../liblinear-1.91/predict heart_scale.test heart_scale2.model heart_scale2.predict
Accuracy = 82.4074% (89/108)

