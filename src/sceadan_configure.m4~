#
# mix-ins for sceadan
#

AC_MSG_NOTICE([Including sceadan_configure.m4])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_FUNCS([vasprintf])

#
# sceadan_lib_check
#


# -lbz2
AC_CHECK_HEADERS([bzlib.h],,AC_MSG_ERROR([missing bzlib.h]))
AC_CHECK_LIB([bz2],[BZ2_bzCompressInit],,AC_MSG_ERROR([missing -lbz2]))
AC_CHECK_FUNCS([BZ2_bzCompressInit BZ2_bzCompress BZ2_bzCompressEnd],,AC_MSG_ERROR([missing bzip2 functions]))


# -llinear
AC_CHECK_HEADERS([linear.h],,AC_MSG_ERROR([missing linear.h]))
AC_CHECK_LIB([linear],[load_model],,AC_MSG_ERROR([missing -llinear]))
AC_CHECK_FUNCS([load_model check_probability_model predict_probability predict],,AC_MSG_ERROR([missing linear functions]))


# -lm
AC_CHECK_HEADERS([math.h],,AC_MSG_ERROR([missing math.h]))
AC_CHECK_LIB([m],[fmax],,AC_MSG_ERROR([missing -lm]))
AC_CHECK_FUNCS([fmin fmax log exp fabs sqrt],,AC_MSG_ERROR([missing math functions]))


# -lz
AC_CHECK_HEADERS([zlib.h],,AC_MSG_ERROR([missing zlib.h]))
AC_CHECK_LIB([z],[deflate],,AC_MSG_ERROR([missing -lz]))
#AC_CHECK_FUNCS([deflateInit2 deflate deflateEnd],,AC_MSG_ERROR([missing zlib functions]))


#
# sceadan_header_check
#


AC_CHECK_HEADERS([assert.h],,AC_MSG_ERROR([missing assert.h]))
AC_CHECK_HEADERS([ftw.h],,AC_MSG_ERROR([missing ftw.h]))
AC_CHECK_HEADERS([stdbool.h],,AC_MSG_ERROR([missing stdbool.h]))
AC_CHECK_HEADERS([stdio.h],,AC_MSG_ERROR([missing stdio.h]))
AC_CHECK_HEADERS([errno.h],,AC_MSG_ERROR([missing errno.h]))
AC_CHECK_HEADERS([ctype.h],,AC_MSG_ERROR([missing ctype.h]))
AC_CHECK_HEADERS([stdlib.h],,AC_MSG_ERROR([missing stdlib.h]))
AC_CHECK_HEADERS([string.h],,AC_MSG_ERROR([missing string.h]))
AC_CHECK_HEADERS([getopt.h],,AC_MSG_ERROR([missing getopt.h]))
AC_CHECK_HEADERS([limits.h],,AC_MSG_ERROR([missing limits.h]))
AC_CHECK_HEADERS([time.h],,AC_MSG_ERROR([missing time.h]))
AC_CHECK_HEADERS([fcntl.h],,AC_MSG_ERROR([missing fcntl.h]))
AC_CHECK_HEADERS([sys/select.h],,AC_MSG_ERROR([missing sys/select.h]))
AC_CHECK_HEADERS([sys/time.h],,AC_MSG_ERROR([missing sys/time.h]))
AC_CHECK_HEADERS([sys/wait.h],,AC_MSG_ERROR([missing sys/wait.h]))


#
# sceadan_warning_check
#

# C and C++
WARNINGS_TO_TEST=" \
	-march=native -mtune=native -pipe \
	-MMD -MP -D_GNU_SOURCE \
	-ansi -Waggregate-return -Wall -Wcast-align -Wcast-qual \
	-Wchar-subscripts -Wcomment -Wconversion -Wdisabled-optimization \
	-Wdouble-promotion -Werror -Wextra -Wfatal-errors -Wfloat-equal \
	-Wformat=2 -Winit-self -Winline -Winvalid-pch -Wlogical-op \
	-Wmissing-format-attribute -Wmissing-include-dirs \
	-Woverlength-strings -Wpacked -Wpadded -pedantic -pedantic-errors \
	-Wredundant-decls -Wshadow -Wstack-protector -Wstrict-aliasing=1 \
	-Wstrict-overflow=5 -Wsuggest-attribute=pure \
	-Wsuggest-attribute=const -Wsuggest-attribute=noreturn \
	-Wswitch-default -Wswitch-enum -Wsync-nand -Wtrampolines -Wundef \
	-Wunknown-pragmas -Wunsafe-loop-optimizations -Wunused-macros \
	-Wvariadic-macros -Wvla -Wwrite-strings"

echo "C (and C++) Warnings to test: $WARNINGS_TO_TEST"

AC_LANG_PUSH(C)
# TODO eliminate redundant code
for option in $WARNINGS_TO_TEST
do
	SAVE_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $option"
	AC_MSG_CHECKING([whether gcc understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CFLAGS="$SAVE_CFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CFLAGS
	#if test $option = "-Wmissing-format-attribute" ; then
	#	AC_DEFINE(HAVE_MISSING_FORMAT_ATTRIBUTE_WARNING,1,
	#	[Indicates that we have the -Wmissing-format-attribute G++ warning])
	#fi
done
unset option
AC_LANG_POP()

echo "(C and) C++ Warnings to test: $WARNINGS_TO_TEST"

AC_LANG_PUSH(C++)
for option in $WARNINGS_TO_TEST
do
	SAVE_CXXFLAGS="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS $option"
	AC_MSG_CHECKING([whether g++ understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CXXFLAGS="$SAVE_CXXFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CXXFLAGS
done
unset option
AC_LANG_POP()



# C only
WARNINGS_TO_TEST=" \
	-Wc++-compat -Wjump-misses-init -Wtraditional \
	-Wtraditional-conversion -Wunsuffixed-float-constants"

echo "C Warnings to test: $WARNINGS_TO_TEST"

AC_LANG_PUSH(C)
for option in $WARNINGS_TO_TEST
do
	SAVE_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $option"
	AC_MSG_CHECKING([whether gcc understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CFLAGS="$SAVE_CFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CFLAGS
	#if test $option = "-Wmissing-format-attribute" ; then
	#	AC_DEFINE(HAVE_MISSING_FORMAT_ATTRIBUTE_WARNING,1,
	#	[Indicates that we have the -Wmissing-format-attribute G++ warning])
	#fi
done
unset option
AC_LANG_POP()



# C++ only
WARNINGS_TO_TEST=" \
	-Wc++0x-compat -fstrict-enums -fvisibility-inlines-hidden \
	-Wnoexcept -Wreorder -Weffc++ -Wstrict-null-sentinel \
	-Woverloaded-virtual -Wsign-promo -ffor-scope"

echo "C++ Warnings to test: $WARNINGS_TO_TEST"

AC_LANG_PUSH(C++)
for option in $WARNINGS_TO_TEST
do
	SAVE_CXXFLAGS="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS $option"
	AC_MSG_CHECKING([whether g++ understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CXXFLAGS="$SAVE_CXXFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CXXFLAGS
done
unset option
AC_LANG_POP()


#
# sceadan_optimization_check
#


#libjpeg disallows this: -fshort-enums
OPTIMIZATIONS_TO_TEST=" \
	-Wabi -freg-struct-return \
	\
	-g0 -feliminate-unused-debug-symbols -feliminate-unused-debug-types \
	-fno-keep-inline-functions -fno-keep-static-consts \
	-fmerge-all-constants -fmodulo-sched -fmodulo-sched-allow-regmoves \
	-fgcse-sm -fgcse-las -fgcse-after-reload \
	-funsafe-loop-optimizations -fdelete-null-pointer-checks \
	-fira-loop-pressure -fsched-pressure -fsched-stalled-insns \
	-fsched-stalled-insns-dep -fsel-sched-pipelining \
	-fsel-sched-pipelining-outer-loops -fipa-struct-reorg -fipa-pta \
	-fipa-matrix-reorg -floop-interchange -floop-strip-mine \
	-floop-block -fgraphite-identity -floop-flatten \
	-ftree-loop-distribution -ftree-loop-im -ftree-loop-ivcanon \
	-fivopts -fvect-cost-model -ftracer -funroll-loops \
	-fvariable-expansion-in-unroller -fuse-linker-plugin \
	-funswitch-loops -fno-stack-protector -fomit-frame-pointer -DNDEBUG \
	\
	-Ofast -fassociative-math -freciprocal-math -ffinite-math-only \
	-fno-signed-zeros -fno-trapping-math -ffunction-sections \
	-fdata-sections -s \
	\
	-flto"

echo "C (and C++) Optimization flags to test: $OPTIMIZATIONS_TO_TEST"

AC_LANG_PUSH(C)
for option in $OPTIMIZATIONS_TO_TEST
do
	SAVE_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $option"
	AC_MSG_CHECKING([whether gcc understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CFLAGS="$SAVE_CFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CFLAGS
done
unset option
AC_LANG_POP()

echo "(C and) C++ Optimization flags to test: $OPTIMIZATIONS_TO_TEST"

AC_LANG_PUSH(C++)
for option in $OPTIMIZATIONS_TO_TEST
do
	SAVE_CXXFLAGS="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS $option"
	AC_MSG_CHECKING([whether g++ understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; CXXFLAGS="$SAVE_CXXFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_CXXFLAGS
done
unset option
AC_LANG_POP()


#
# sceadan_linker_check
#



AC_MSG_NOTICE([Including sceadan_linker_check.m4])

LDFLAGS_TO_TEST=" \
	-Wl,-O1 -Wl,--sort-common -Wl,--relax -Wl,--strip-debug -Wl,-z,now"

echo "Linker flags to test: $LDFLAGS_TO_TEST"

for option in $LDFLAGS_TO_TEST
do
	SAVE_LDFLAGS="$LDFLAGS"
	LDFLAGS="$LDFLAGS $option"
	AC_MSG_CHECKING([whether ld understands $option])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],
		[has_option=yes],
		[has_option=no; LDFLAGS="$SAVE_LDFLAGS"])
	AC_MSG_RESULT($has_option)
	unset has_option
	unset SAVE_LDFLAGS
done
unset option
